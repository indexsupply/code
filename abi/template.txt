{{ define "header" }}
// Code generated by "genabi"; DO NOT EDIT.

package {{ . }}

import (
	"math/big"

	"github.com/indexsupply/x/abi"
)
{{ end }}

{{- define "event-input" -}}
	abi.Input{
		Name: "{{.Name}}",
		Type: "{{.Type}}",
		{{ if eq .Type "tuple" -}}
		Components: []abi.Input{
		{{ range .Components -}}
		{{ template "event-input" . }}
		{{ end }}
		},
		{{ end }}
	},
{{- end -}}

{{ define "tuples" -}}
	{{ range $inp := . -}}
		{{ if eq .Type "tuple" }}
			type {{camel .Name }} struct {
				it *abi.Item
			}
			{{ template "tuples" $inp.Components -}}
		{{ end -}}
	{{ end -}}
{{ end -}}

{{ define "accessor" }}
	{{ if eq .Input.ABIType.Kind 2 -}}
		func (x *{{ camel .Event.Name }}){{ camel .Input.Name }}() *{{ camel .Input.Name }} {
			i := x.it.At({{ .Index }})
			return &{{ camel .Input.Name }}{&i}
		}
		{{ range $i, $input := .Input.Components -}}
			{{ template "accessor" col $i $.Event $input -}}
		{{ end }}
	{{ else if eq .Input.ABIType.Kind 3 -}}
		{{ if gt .Input.ABIType.Length 0 -}}
			func (x *{{ camel .Event.Name }}){{ camel .Input.Name }}() [{{ .Input.ABIType.Length }}]{{ .Input.ABIType.Elem.TemplateType }} {
				it := x.it.At({{ .Index }})
				if it.Len() != {{ .Input.ABIType.Length }} {
					panic("genabi: {{ camel .Event.Name }}.{{ camel .Input.Name }} array size mismatch")
				}
				var res [{{ .Input.ABIType.Length }}]{{ .Input.ABIType.Elem.TemplateType }}
				for i, v := range it.List() {
					res[i] = v.{{ .Input.ABIType.Elem.TemplateFunc }}()
				}
				return res
			}
		{{ else }}
			func (x *{{ camel .Event.Name }}){{ camel .Input.Name }}() []{{ .Input.ABIType.Elem.TemplateType }} {
				it := x.it.At({{ .Index }})
				res := make([]{{ .Input.ABIType.Elem.TemplateType }}, it.Len())
				for i, v := range it.List() {
					res[i] = v.{{ .Input.ABIType.Elem.TemplateFunc }}()
				}
				return res
			}
		{{ end }}
	{{ else  -}}
		func (x *{{ camel .Event.Name}}){{ camel .Input.Name }}() {{ .Input.ABIType.TemplateType }}{
			return x.it.At({{ .Index }}).{{ .Input.ABIType.TemplateFunc }}()
		}
	{{ end -}}
{{ end }}

{{- define "event" -}}
	var {{ camel .Name }}Event = abi.Event{
		Name: "{{ .Name }}",
		Inputs: []abi.Input{
			{{ range .Inputs -}}
			{{ template "event-input" . }}
			{{ end }}
		},
	}

	type {{ camel .Name }} struct {
		it *abi.Item
	}

	func Match{{ camel .Name }}(l abi.Log) (*{{ camel .Name }}, bool) {
		i, ok := abi.Match(l, {{ camel .Name }}Event)
		return &{{ camel .Name }}{&i}, ok
	}

	{{ template "tuples" .Inputs -}}

	{{ $event := . }}
	{{ range $i, $input := .Inputs -}}
		{{ template "accessor" col $i $event $input -}}
	{{ end -}}
{{ end -}}
