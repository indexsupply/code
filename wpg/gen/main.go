package main

import (
	"context"
	"database/sql"
	"fmt"
	"go/format"
	"os"
	"strconv"
	"strings"
	"time"

	"blake.io/pqx/pqxtest"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/jackc/pgx/v5/stdlib"
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}

const template = `
// Code generated by wpg/gen/main.go; DO NOT EDIT.

package wpg

var keywords = map[string]struct{}{
	%s
}
`

func main() {
	ctx := context.Background()
	sql.Register("postgres", stdlib.GetDefaultDriver())

	pqxtest.Start(time.Second*30, 0)
	pg, err := pgxpool.New(ctx, pqxtest.DSN())
	check(err)
	rows, err := pg.Query(ctx, "select word from pg_get_keywords() where catdesc = 'reserved' order by word;")
	check(err)

	defer rows.Close()

	words := []string{}
	for rows.Next() {
		var word string
		err := rows.Scan(&word)
		check(err)
		words = append(words, fmt.Sprintf("%s: struct{}{},", strconv.Quote(word)))
	}
	check(rows.Err())

	pqxtest.Shutdown()

	f, err := os.Create("./keywords.go")
	check(err)
	defer f.Close()

	wc := strings.Join(words, "\n\t")

	c, err := format.Source([]byte(fmt.Sprintf(template, wc)))
	check(err)

	_, err = f.Write(c)
	check(err)
}
